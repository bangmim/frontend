// # DOM 업데이트
count [state,setState]=useState(initialValue)

const [count, setCount]=useState(0);            //선언
<button onClick={()=>setCount(count+1)}>Add</button>    //함수 적용

state Hook 없이 DOM 업데이트 하기

// DOM을 업데이트하기 위해서는 virtualDOM을 다시 return 해야한다.
// virtualDOM을 다시 return하기 위해서는 컴포넌트를 다시 실행해야 한다.
// setState는 컴포넌트를 다시 실행한다.
  
  function handleClick(e){
    count++;
    console.log(count)        //count는 증가하지만 업데이트는 되지 않는다.
  }

//시계
function App(){     (1) App컴포넌트 실행된다

  console.log("App Loaded!")
  const initialTime=new Date().toLocaleTimeString();
  const [time, setTime]=useState(initialTime)

  // 시계를 작동 > 업데이트해야한다.
  setTimeout(()=>{      (2) setTimteout()함수 실행
    const updateTime=new Date().toLocaleTimeString();
    // 1000ms 마다 setTime이 업데이트 된다.
    setTime(updateTime)     (3)setTime 업데이트 > 다시 (1)로 돌아가며 계속 실행된다
  },1000)

  return(
    <>
    <h1>시계</h1>
    <p>{time}</p>   
    </>
  )
}

==## Q.1
function App(){
  const [count, setCount]=useState(0);

  return(
    <>
    <h1>Count</h1>
    <p>{count}</p>

    <button onClick={()=>setCount(count-1)}>-</button>
    <button onClick={()=>setCount(count+1)}>+</button>
    </>
  )
}

==## Q.2

function App(){
  const [subscribe, setSubscribe]=useState(false);

  // function handleClick(e){   //함수 선언 -> onClick={handleClick}으로 변경.
  //   console.log(subscribe)    //false 출력.   // subscribe의 설정된 초기값이 계속 출력되는 것. (업데이트를 하지 않았기 때문)
  //   console.log(!subscribe)   //true
  // }

  // function handleClick(e){  //함수 선언 -> onClick={handleClick}으로 변경.
  //   if(subscribe){
  //     setSubscribe(false)
  //   }else{
  //     setSubscribe(true)
  //   }
  // }

  return(
    <>
    <h1>구독하기</h1>

    {/* 함수를 선언하지 않고 적용 */}
    <button onClick={()=>setCount(!count)}>
    {/* 출력하는 공간에 조건문 적용 */}
    {!count ? "구독하기":"구독중"}</button>
   
    </>
  )
}

==## Q.3

function App(){
  const [subscribe, setSubscribe]=useState(false);
  const [subscriber,setSubscribers]=useState(0);

  // 함수에 조건이 붙을 때에는 따로 선언하여 적용한다.
  function handleClick(){
   if (subscribe){
    setSubscribe(false);
    setSubscribers(subscriber -1) 
   }else{
    setSubscribe(true);
    setSubscribers(subscriber +1)
   }
  }

  return(
    <>
    <h1>Subscribe</h1>
    <p>구독자 수 : {subscriber}</p>
    <button onClick={handleClick}>{!subscribe?"구독하기":"구독중"}</button>
    </>
  )
}